<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
	<channel>
		<title />
		<link>/</link>
		<description />
		<copyright>2021</copyright>
		<pubDate>Sat, 30 Jan 2021 22:53:16 GMT</pubDate>
		<lastBuildDate>Sat, 30 Jan 2021 22:53:16 GMT</lastBuildDate>
		<item>
			<title>Introduction to language processing and Phases of compiler</title>
			<link>/posts/introductionandphasesofcompilerpartone</link>
			<guid isPermaLink="false">/posts/introductionandphasesofcompilerpartone</guid>
			<pubDate>Sat, 30 Jan 2021 06:27:14 GMT</pubDate>
			<content:encoded>&lt;p&gt;Compiler is one of the fascinating programs that has been built ex: &lt;a href="https://en.wikipedia.org/wiki/GNU_Compiler_Collection"&gt;GCC&lt;/a&gt;, it is a direct application of &lt;a href="https://en.wikipedia.org/wiki/Automata_theory"&gt;Automata Theory&lt;/a&gt; in source code analysis and In lame terms compilers just translate from high level language to low level language (&lt;a href="https://en.wikipedia.org/wiki/Machine_code"&gt;Machine Level Code&lt;/a&gt;) binary form, Which CPU can understand.&lt;/p&gt;
&lt;p&gt;Compilation process has different phases which can be broken down to front end ( parsing source code and analysis with automata theory), middle end (code optimization phase) and back end (&lt;a href="https://en.wikipedia.org/wiki/X86"&gt;x86&lt;/a&gt;  &lt;a href="https://en.wikipedia.org/wiki/Intel"&gt;INTEL&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Advanced_Micro_Devices"&gt;AMD&lt;/a&gt; , &lt;a href="https://en.wikipedia.org/wiki/ARM_architecture"&gt;ARM&lt;/a&gt; &lt;a href="https://en.wikipedia.org/wiki/Apple_M1"&gt;APPLE M1 CHIP&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Intel, AMD X86 instruction set &lt;a href="https://en.wikipedia.org/wiki/Complex_instruction_set_computer"&gt;CISC&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Apple M1 ARM instruction set &lt;a href="https://en.wikipedia.org/wiki/Reduced_instruction_set_computer"&gt;RISC&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="fun-fact"&gt;Fun Fact :&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;The reason why the Apple M1 chip is faster is because of this ARM architecture but they added much more than that. Switching from X86 to ARM was the huge step for the &lt;a href="https://www.apple.com/mac/m1/"&gt;Apple M1 chip&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Reduced_instruction_set_computer"&gt;RISC&lt;/a&gt; is much faster than &lt;a href="https://en.wikipedia.org/wiki/Complex_instruction_set_computer"&gt;CISC&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/ARM_architecture"&gt;ARM&lt;/a&gt;(&lt;a href="https://www.apple.com/mac/m1/"&gt;Apple M1 chip&lt;/a&gt;) consumes less power compared to &lt;a href="https://en.wikipedia.org/wiki/X86"&gt;x86&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="research-papers"&gt;Research papers&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/LLVM"&gt;LLVM&lt;/a&gt; (low level virtual machine) research &lt;a href="https://llvm.org/pubs/2004-01-30-CGO-LLVM.pdf"&gt;paper&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.llvm.org/"&gt;llvm.org&lt;/a&gt; interestingly generated with &lt;a href="https://golang.org/"&gt;go lang&lt;/a&gt; &lt;a href="https://gohugo.io/"&gt;Hugo framework&lt;/a&gt; which is a static site generator, The blog you are reading is generated by a static site generator which is built with &lt;a href="https://en.wikipedia.org/wiki/C_Sharp_%28programming_language%29"&gt;C#&lt;/a&gt; web framework called &lt;a href="https://statiq.dev/"&gt;statiq&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="what-is-llvm"&gt;What is LLVM?&lt;/h3&gt;
&lt;p&gt;I am not going to explain what it is right now &lt;a href="https://llvm.org/"&gt;llvm.org&lt;/a&gt; has everything you need to know about it. LLVM is a framework to develop compilers commercial and open source projects&lt;/p&gt;
&lt;p&gt;According to wiki&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The LLVM compiler infrastructure project is a set of compiler and toolchain technologies, which can be used to develop a front end for any programming language and a back end for any instruction set architecture. LLVM is designed around a language-independent intermediate representation (IR) that serves as a portable, high-level assembly language that can be optimized with a variety of transformations over multiple passes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id="intresting-reserch-pepares-to-read"&gt;Intresting reserch pepares to read.&lt;/h6&gt;
&lt;p&gt;designing compilers for quantum computing &lt;a href="https://arxiv.org/pdf/2012.09680.pdf"&gt;research paper&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ML guided compiler optimization framework &lt;a href="https://arxiv.org/pdf/2101.04808.pdf"&gt;research paper&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Microsoft research papers on &lt;a href="https://www.microsoft.com/en-us/research/uploads/prod/2019/09/static-typescript-draft2.pdf"&gt;Static TypeScript&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# compiler &lt;a href="https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/tr-2003-32.pdf"&gt;research papers&lt;/a&gt;
, &lt;a href="https://github.com/dotnet/fsharp/blob/main/docs/compiler-guide.md"&gt;F# Compiler&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Before you read that research paper, Which i have added for reader reference, I will try to explain source language compilation and how it works under the hood as simply as possible.&lt;/p&gt;
&lt;h1 id="compiler"&gt;Compiler&lt;/h1&gt;
&lt;p&gt;Compiler is a program that translates into source code which is written in human readable language ( high level programming such as c,c++) into target program ( low level code, executable). Reports error in the source code during the process.&lt;/p&gt;
&lt;p&gt;According to wiki&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In computing, a compiler is a computer program that translates computer code written in one programming language (the source language) into another language (the target language). The name &amp;quot;compiler&amp;quot; is primarily used for programs that translate source code from a high-level programming language to a lower level language (e.g., assembly language, object code, or machine code) to create an executable program.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://imgur.com/APZ7qu5"&gt;&lt;img src="https://i.imgur.com/APZ7qu5.png" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="interpreter"&gt;Interpreter&lt;/h1&gt;
&lt;p&gt;Interpreter is another type of language translator just like a compiler but instead of compiling down the source code to target program, interpreter interprets the source code line by line, on user inputs and produces outputs which makes the interpreter much more efficient in error diagnostics.&lt;/p&gt;
&lt;p&gt;According to wiki&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In computer science, an interpreter is a computer program that directly executes instructions written in a programming or scripting language, without requiring them previously to have been compiled into a machine language program.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://imgur.com/uNrBONd"&gt;&lt;img src="https://i.imgur.com/uNrBONd.png" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="transpiler"&gt;Transpiler&lt;/h1&gt;
&lt;p&gt;Transpiler is source code to source code language transpilation ex:- Typescript to javascript is know has transpilation, Babeljs is a transpiler which takes the &lt;a href="https://javascript.info/"&gt;modern javascript&lt;/a&gt; code, javascript is also know has &lt;a href="https://en.wikipedia.org/wiki/ECMAScript"&gt;ECMAscript&lt;/a&gt;.&lt;/p&gt;
&lt;h6 id="example"&gt;example&lt;/h6&gt;
&lt;p&gt;&lt;a href="https://babeljs.io/"&gt;https://babeljs.io/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="further-reading"&gt;Further reading&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Babel_(transcompiler)"&gt;Babel (transcompiler) - Wikipedia&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Source-to-source_compiler"&gt;Source-to-source compiler - Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://imgur.com/3vf6RU5"&gt;&lt;img src="https://i.imgur.com/3vf6RU5.png" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="hybrid-compiler"&gt;Hybrid compiler&lt;/h1&gt;
&lt;p&gt;Hybrid compiler is a combination of compiler and interpreter which is interpreted by virtual machine. Ex: C# source program first compiled into IL intermediate language. In the case of java it produces bytecode which is interpreted by a virtual machine. JIT compilers translate the bytecodes into machine language immediately.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://imgur.com/NDTfzRO"&gt;&lt;img src="https://i.imgur.com/NDTfzRO.png" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# and java uses a hybrid compiler under the hood, it is not a compiler or an interpreter but a combination of both I will try to summarize has much information as possible about C# compilation process. I will not go in details about CLR this time. Let’s take a moment to read about it.&lt;/p&gt;
&lt;h3 id="common-language-infrastructure-and-common-language-runtime-of-microsoft.net-framework"&gt;Common Language Infrastructure and Common Language Runtime of Microsoft .NET Framework&lt;/h3&gt;
&lt;p&gt;CLI provides a language neutral platform for application development CLR is an execution engine for .NET Framework,  .NET program compiles down to IL ( intermediate Language) during execution JIT compiles into CPU &lt;a href="https://llvm.org/docs/CompilerWriterInfo.html"&gt;hardware architecture&lt;/a&gt; specific machine code.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://imgur.com/HPaKVoP"&gt;&lt;img src="https://i.imgur.com/HPaKVoP.png" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now let’s look an example how a C# source code looks like in different phase of compilation.&lt;/p&gt;
&lt;h6 id="example-c-hello-world-program"&gt;example C# hello world program&lt;/h6&gt;
&lt;p&gt;below snip is written in a &lt;a href="https://www.linqpad.net/"&gt;linqpad&lt;/a&gt; which does not needed to include namespaces.&lt;/p&gt;
&lt;h1 id="source-program"&gt;Source program&lt;/h1&gt;
&lt;pre&gt;&lt;code class="language-C#"&gt;void Main()
{
    Console.WriteLine(&amp;quot;Hello World&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="abstract-syntax-tree"&gt;Abstract Syntax Tree&lt;/h1&gt;
&lt;p&gt;Abstract syntax tree helps in generating intermediate-code in this CIL ( common intermediate language ).&lt;/p&gt;
&lt;h6 id="i-will-discuss-how-to-create-a-ast-in-part-2-of-this-blog-post"&gt;I will discuss how to create a AST in part - 2 of this blog post.&lt;/h6&gt;
&lt;p&gt;&lt;a href="https://imgur.com/o5S31y2"&gt;&lt;img src="https://i.imgur.com/o5S31y2.png" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="syntax-definition"&gt;Syntax Definition&lt;/h1&gt;
&lt;p&gt;Context free grammar is used to define the rules for a language. In lame terms a set of rules written in a formal language, which are defined from automata theory or we can say theory of computer science. The vocabulary used to define this is called production rules. That describes syntax of a programming language or a string.&lt;/p&gt;
&lt;h6 id="dont-freek-out-if-you-dont-understand-about-cfg-i-will-explain-later-in-this-blog-post"&gt;Don't freek out if you don't understand about CFG, i will explain later in this blog post. :)&lt;/h6&gt;
&lt;p&gt;&lt;a href="https://imgur.com/gpH4tg1"&gt;&lt;img src="https://i.imgur.com/gpH4tg1.png" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="intermediate-code-generation"&gt;Intermediate Code Generation&lt;/h1&gt;
&lt;p&gt;Before I start describing how we got from AST to IL, We need to deep dive into the Run-Time environments of a VM or and &lt;a href="https://llvm.org/docs/CompilerWriterInfo.html"&gt;CPU architecture&lt;/a&gt; which are out of scope for this blog. I will link it here once I write about it.&lt;/p&gt;
&lt;p&gt;As of now to arrive at this point we have to go throw the paraser -&amp;gt; static checking -&amp;gt; Intermediate Code Generator. All of this are done sequentially; sometimes they can be combined and folded into parsing. &lt;a href="https://en.wikipedia.org/wiki/Directed_acyclic_graph"&gt;DAG&lt;/a&gt; just like AST are used for arithmetic expressions evaluation.&lt;/p&gt;
&lt;p&gt;Front end analyzes a source program and creates an intermediate representation. From which Back end generates the target code.&lt;/p&gt;
&lt;p&gt;A compiler for language i and machine j can be built by combining the front end for language i with the back end for machine j.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-x86asm"&gt;IL_0000:  ldstr       &amp;quot;Hello World&amp;quot;
IL_0005:  call        System.Console.WriteLine
IL_000A:  ret

get_QueryCancelToken:
IL_0000:  ldarg.0
IL_0001:  ldfld       UserQuery._queryCancelTokenOrigin
IL_0006:  callvirt    System.Lazy&amp;lt;System.Threading.CancellationToken&amp;gt;.get_Value
IL_000B:  ret
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="static-checking-and-type-checking"&gt;Static Checking and Type Checking&lt;/h2&gt;
&lt;p&gt;Static checking is a consistency check that is done during compilation which catches the programming errors early in the compilation process. Static checking includes Syntactic checking and type checking, type rules of a language assure that an operator is applied to the right number and type of operands.&lt;/p&gt;
&lt;p&gt;A compiler needs to assign a type expression to each component of the source program and it has to conform to a collection of logical rules that is called the type system for the source language type and a sound type system elements the dynamic checking for type errors.&lt;/p&gt;
&lt;p&gt;Rules for type checking have two forms: Synthesis and inference. Type synthesis builds up the type of an expression from the types of its subexpressions, Type inference determines the type of a language construct from the way it is used&lt;/p&gt;
&lt;p&gt;Type conversion conversion from one type to another is said to be implicit if it is done by compiler automatically it is also called as coercionsl, conversion said to be explicit if the programmer must write something to cause the conversion.&lt;/p&gt;
&lt;h6 id="example-1"&gt;Example&lt;/h6&gt;
&lt;p&gt;The type of an expression E1 op E2 is determined by the operator op and the types of E1 and E2. A coercion is an implicit type conversion, such as from integer to oat. Intermediate code contains explicit type conversions to ensure an exact match between operand types and the types expected by an operator.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The above part might sound jaragon to you if you don't have any understanding of theory of computer science, Algorithms and Data Structures.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;We will learn basics of automata theory, CFG, history about computer science theory, syntax definition, parse tree, SDT and SDD in part - 2 of this blog post. I will try to summarize it without any loss of information.&lt;/p&gt;
&lt;/blockquote&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Serverless-FaaS use cases</title>
			<link>/posts/serverlessusecases</link>
			<description>&lt;p&gt;&lt;strong&gt;Batch processing&lt;/strong&gt; an offline system, Batch processing takes a large amount of data at once and runs a bunch of jobs on it, In this scenario usually, the user will not wait for any sort of response back from the server, Jobs are scheduled and run in periodically Maybe we replace expanse on extract-transform-load(ETL)&lt;/p&gt;</description>
			<guid isPermaLink="false">/posts/serverlessusecases</guid>
			<pubDate>Sat, 16 Jan 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;h1 id="serverless-usecases"&gt;Serverless UseCases.&lt;/h1&gt;
&lt;h2 id="some-use-cases-of-serverless-computing"&gt;some Use cases of serverless computing.&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Batch processing&lt;/strong&gt; an offline system, Batch processing takes a large amount of data at once and runs a bunch of jobs on it, In this scenario usually, the user will not wait for any sort of response back from the server, Jobs are scheduled and run in periodically Maybe we replace expanse on extract-transform-load(ETL)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://imgur.com/H65RZ70"&gt;&lt;img src="https://i.imgur.com/H65RZ70.png" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Infrastructure automation&lt;/strong&gt; IT-ops can automate scheduled jobs, monitor network changes, use triggers  and events for verse different systems.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://imgur.com/UQdm3lQ"&gt;&lt;img src="https://i.imgur.com/UQdm3lQ.png" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stream processing&lt;/strong&gt; an online/offline system, it is also called nearline processing. just like batch processing system, stream processing takes input and produces output. But stream processing works on events where batch processing. Stream processing builds upon batch jobs.&lt;/p&gt;
&lt;p&gt;Today we use serverless managed services that process event streams since functions typically stateless in many platforms we can't do windowing and operations like that. There are great managed services for stream processing today in the cloud that require no infrastructure. No complexity.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://imgur.com/MP9vnnz"&gt;&lt;img src="https://i.imgur.com/MP9vnnz.png" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3 - tier web apps&lt;/strong&gt; or often SPA or sites that talk to serverless storage. Only invoked and run when someone uses it. a typical 3 tier web app&lt;/p&gt;
&lt;p&gt;&lt;a href="https://imgur.com/SrvMjnk"&gt;&lt;img src="https://i.imgur.com/SrvMjnk.png" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Web APIs&lt;/strong&gt; are a great option, easy to build web api  data and query systems and do simple calculations, release and deploy without setting up any infrastructure.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://imgur.com/up5275z"&gt;&lt;img src="https://i.imgur.com/up5275z.png" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AI and machine learning Data crunching, just like stream and batch processing.&lt;/p&gt;
&lt;h3 id="further-reading"&gt;Further reading&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Azure Serverless&lt;/strong&gt; &lt;a href="https://docs.microsoft.com/en-us/dotnet/architecture/serverless/serverless-business-scenarios"&gt;business senarios&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Amazon AWS&lt;/strong&gt; &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/stepfunctions-patterns.html"&gt;step functions&lt;/a&gt;,
&lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-services.html"&gt;lambda services&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Google Cloud&lt;/strong&gt; &lt;a href="https://cloud.google.com/functions/#section-6"&gt;functions&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="summary"&gt;summary&lt;/h2&gt;
&lt;p&gt;serverless functions are cheap and useful they have many use cases, Even though they are stateless and has a cold start time, The technology is still getting maturing at the time of this blog is published. Amazon is adding a lot of research on this area.&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Serverless Frameworks</title>
			<link>/posts/serverlessframeworks</link>
			<guid isPermaLink="false">/posts/serverlessframeworks</guid>
			<pubDate>Sun, 10 Jan 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;h1 id="serverless-frameworks"&gt;Serverless Frameworks.&lt;/h1&gt;
&lt;p&gt;serverless frameworks that can work on any major service cloud provider like Amazon, azure, Cloudflare etc.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Amplify Framework&lt;/strong&gt; :- &lt;a href="https://docs.amplify.aws/"&gt;Amzon Amplify&lt;/a&gt;  lib’s, tools and components for AWS-powered cloud apps in serverless specifically.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Spring Cloud Function&lt;/strong&gt;:-  &lt;a href="https://spring.io/projects/spring-cloud-function"&gt;spring framework&lt;/a&gt; with function friendly  adapters for different clouds dynamic compilation of functions and mechanisms for invoking them for HTTP and messaging source.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Claudia js&lt;/strong&gt;:- &lt;a href="https://www.claudiajs.com/"&gt;Claudiajs&lt;/a&gt;  nodejs projects  it automates some key things for deployment and configuration of the API gateway specifically.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rubyonjets&lt;/strong&gt;:- &lt;a href="https://rubyonjets.com/"&gt;Rubyonjets&lt;/a&gt;  is for building serverless with ruby language.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stackery&lt;/strong&gt;:-  &lt;a href="https://www.stackery.io/"&gt;Stackery&lt;/a&gt; for operational management like building, deployment of systems.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Iopipe&lt;/strong&gt;:-  &lt;a href="https://www.iopipe.com/"&gt;Iopipe&lt;/a&gt; used to building operating functions helps with development.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sigma IDE&lt;/strong&gt;:- &lt;a href="https://www.slappforge.com/sigma"&gt;Slappforge&lt;/a&gt; used for building serverless systems and managing serverless systems, with graphical way to build it things.&lt;/p&gt;
&lt;h1 id="summary"&gt;Summary&lt;/h1&gt;
&lt;p&gt;there are many many frameworks out there that support serverless technology, In fact, every popular web programming language as some sort of open-source framework.&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>What is FaaS</title>
			<link>/posts/faas</link>
			<guid isPermaLink="false">/posts/faas</guid>
			<pubDate>Sat, 09 Jan 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;h1 id="what-is-serverless-cloud-computing"&gt;What is serverless cloud computing ?&lt;/h1&gt;
&lt;p&gt;In simple terms serverless computing is bit sided code, unit of discrete components which does one thing in one fine life span. All the responsibilities are delegated to the service provider. Like amazon aws and microsoft azure.&lt;/p&gt;
&lt;p&gt;Responsibilities like choosing an operating system, Capacity management and planning, scaling and reliability of the server anything that breaks this responsibility by the vendor is not fully serverless.&lt;/p&gt;
&lt;p&gt;We are only responsible for maintaining the code.  Developer is no longer involved in hosting the web-app/code online ( server/cloud) no Need to maintain the computing resources like Server, RAM, CPU or any hardware infrastructure.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;,  let's talk about Azure function or AWS Lambda. As developers, we no longer have to think about which OS or language to use, deployment, and scaling with fault tolerance, logs, updates, metrics, etc. All of this is taken care of by the vendor. In this case, Microsoft or Amazon. We simply outsource these responsibilities to them.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;&lt;strong&gt;According to wikipedia&lt;/strong&gt;  Serverless computing is a cloud computing execution model in which the cloud provider allocates machine resources on demand, taking care of the servers on behalf of the their customers.
Pricing is based on the actual amount of resources consumed by an application , However developers of serverless applications are not concerned with capacity planning, configuration, management, maintenance, operating or scaling of containers, VMs, or physical servers.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="which-vendors-are-providing-serverless-cloud-computing"&gt;Which vendors are providing serverless cloud computing?&lt;/h1&gt;
&lt;h2 id="aws-lambda"&gt;&lt;a href="https://aws.amazon.com/lambda/"&gt;AWS Lambda&lt;/a&gt;:&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://imgur.com/DnUvQLc"&gt;&lt;img src="https://i.imgur.com/DnUvQLc.png" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;supported languages&lt;/em&gt; node, &lt;strong&gt;java, C#, python&lt;/strong&gt;. &lt;a href="https://learn.lytics.com/documentation/product/integrations/aws/aws-kinesis/kinesis-triggers"&gt;Triggers kinesis&lt;/a&gt;, &lt;a href="https://aws.amazon.com/dynamodb/"&gt;Amazon DynamoDB&lt;/a&gt;, &lt;a href="https://aws.amazon.com/sqs/"&gt;SQS&lt;/a&gt;, &lt;a href="https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-function-s3.html"&gt;Amazon S3&lt;/a&gt;, &lt;a href="https://aws.amazon.com/blogs/aws/building-serverless-pipelines-with-amazon-cloudwatch-events/"&gt;CloudWatch&lt;/a&gt;,&lt;a href="https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-function-cognito.html"&gt;Cognito&lt;/a&gt;, &lt;a href="https://docs.aws.amazon.com/config/latest/developerguide/WhatIsConfig.html"&gt;Config&lt;/a&gt;, &lt;a href="https://aws.amazon.com/lex/"&gt;lex&lt;/a&gt;. Known features dynamic scaling, Cross AZ, Custom runtimes, HTTP via API GateWay, Workflow with step functions, Extensible layers.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="azure-functions"&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/azure-functions/"&gt;Azure functions&lt;/a&gt;:&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://imgur.com/YCXUF2s"&gt;&lt;img src="https://imgur.com/YCXUF2s.png" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;supported languages&lt;/em&gt; &lt;strong&gt;C#, F#, Java, Node&lt;/strong&gt;. &lt;a href="https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-storage-blob-trigger?tabs=csharp"&gt;Azure Triggers Blob&lt;/a&gt;, &lt;a href="https://azure.microsoft.com/en-us/services/cosmos-db/"&gt;Azure Cosmos DB&lt;/a&gt;, &lt;a href="https://azure.microsoft.com/en-us/services/event-grid/"&gt;Azure Event Grid&lt;/a&gt;, &lt;a href="https://azure.microsoft.com/en-us/services/event-hubs/"&gt;Azure Event Hubs&lt;/a&gt;, &lt;a href="https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-http-webhook-trigger?tabs=csharp"&gt;Azure HTTP triggers&lt;/a&gt;, &lt;a href="https://azure.microsoft.com/en-us/services/service-bus/"&gt;Azure Service Bus&lt;/a&gt;, &lt;a href="https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-timer?tabs=csharp"&gt;Time Triggers&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="google-cloud"&gt;&lt;a href="https://cloud.google.com/serverless/"&gt;Google Cloud&lt;/a&gt;:&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://imgur.com/4UkBSLd"&gt;&lt;img src="https://imgur.com/4UkBSLd.png" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Supported Languages&lt;/em&gt;. &lt;strong&gt;Node, python, GO&lt;/strong&gt; Available &lt;a href="https://cloud.google.com/functions/docs/calling/http"&gt;triggers&lt;/a&gt; HTTP, &lt;a href="https://cloud.google.com/pubsub/"&gt;pub/sub&lt;/a&gt;, Storage, &lt;a href="https://cloud.google.com/firestore/"&gt;FireStore&lt;/a&gt;, &lt;a href="https://firebase.google.com/"&gt;Firebase&lt;/a&gt;, Scheduler Features to know Auto Scaled with “max” option,  Version draining,  Function can run under unique identities&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="cloudflare"&gt;Cloudflare&lt;/h2&gt;
&lt;p&gt;Supported languages &lt;strong&gt;Javascript, webassembly&lt;/strong&gt; Available triggers HTTP Features to know Deploy to 160+ edge data centers, Respond in milliseconds, Workers kv for close data.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="installable-faas"&gt;Installable FaaS&lt;/h2&gt;
&lt;p&gt;If your enterprise can effort a data center then consider this  opens source FaaS platforms  Knative, Apache openwhisk, Kubeless, Pivotal function service, IBM cloud private, GitLab&lt;/p&gt;
&lt;h1 id="how-much-does-it-cost-do-you-need-serverless"&gt;How much does it cost? Do you need serverless?&lt;/h1&gt;
&lt;p&gt;Cost estimation for your serverless function add in the requirement and it will estimate a cost for you.
&lt;a href="http://serverlesscalc.com"&gt;serverlesscalc.com&lt;/a&gt;, If you think you need a serverless services? Should your webapp should be a serverless? Then you can check that with the below link. &lt;a href="https://servers.lol"&gt;servers.lol&lt;/a&gt;.&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>What is Cloud Computing</title>
			<link>/posts/cloudcomputing</link>
			<guid isPermaLink="false">/posts/cloudcomputing</guid>
			<pubDate>Tue, 05 Jan 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;h1 id="what-is-cloud-computing"&gt;What is cloud computing?&lt;/h1&gt;
&lt;p&gt;In a nutshell cloud computing allows access to a large amount of computing power in a fully virtualized manner. The aim of this technology is to deliver computing as a utility.
Utility computing is a business model of on-demand delivery of computing power ( pay-as-you-go).&lt;/p&gt;
&lt;p&gt;Cloud computing provides multiple services initially offered by microsoft, google and amazon based on a model where computing infrastructure is viewed as a “cloud”.&lt;/p&gt;
&lt;p&gt;Principle of cloud computing behind this model is to offer computing, storage and software as service.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Professor Dr. Rajkumar Buyya's Cyberhome says “Cloud is a parallel and distributed computing system consisting of a collection of inter-connected and virtualised computers that are dynamically provisioned and presented as one or more unified computing resources based on service-level agreements (SLA) established through negotiation between the service provider and consumers.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="types-of-cloud-computing"&gt;Types of cloud computing&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://imgur.com/2ioC9U8"&gt;&lt;img src="https://i.imgur.com/2ioC9U8.png" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SaaS&lt;/strong&gt; (Software as a service ): Self- service with zero operations. Software with no installation, no patch, and operations.&lt;br/&gt;
&lt;strong&gt;IaaS&lt;/strong&gt; (Infrastructure as a service ): Agile, on-demand infrastructure. Get things based on your business needs. Very flexible.&lt;br/&gt;
&lt;strong&gt;PaaS&lt;/strong&gt; (Application as a service): Application-centric with integrated runtime. Building an application stack is not required.&lt;br/&gt;
&lt;strong&gt;CaaS&lt;/strong&gt; (Container as a service): Intelligent machinery for diverse workloads. This machinery helps developers handle all types of workloads. It might not be suitable for other environments, though. Ex:- Kubernetes.&lt;br/&gt;
&lt;strong&gt;FaaS&lt;/strong&gt; (Function as a service): Pay-per-use code used for execution only. It is used when something is running as it also makes development fast and easy. ( serverless computing ) &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://imgur.com/wyvifCD"&gt;&lt;img src="https://i.imgur.com/wyvifCD.png" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="summary"&gt;Summary&lt;/h1&gt;
&lt;p&gt;In a nutshell cloud computing is an SLA between vendor and enterprise, Venders like AWS, Azure.&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
	</channel>
</rss>